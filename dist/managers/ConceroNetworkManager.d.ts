import { ConceroNetwork } from "../types/ConceroNetwork";
import { NetworkManagerConfig } from "../types/ManagerConfigs";
import { IConceroNetworkManager, NetworkUpdateListener } from "../types/managers";
import { HttpClient } from "../utils";
import { LoggerInterface } from "../types/LoggerInterface";
import { ManagerBase } from "./ManagerBase";
export declare class ConceroNetworkManager extends ManagerBase implements IConceroNetworkManager {
    private static instance;
    private mainnetNetworks;
    private testnetNetworks;
    private allNetworks;
    private activeNetworks;
    private updateListeners;
    private logger;
    private config;
    private httpClient;
    private constructor();
    static getInstance(): ConceroNetworkManager;
    static createInstance(logger: LoggerInterface, httpClient: HttpClient, config: NetworkManagerConfig): ConceroNetworkManager;
    initialize(): Promise<void>;
    registerUpdateListener(listener: NetworkUpdateListener): void;
    unregisterUpdateListener(listener: NetworkUpdateListener): void;
    getMainnetNetworks(): Record<string, ConceroNetwork>;
    getTestnetNetworks(): Record<string, ConceroNetwork>;
    getAllNetworks(): Record<string, ConceroNetwork>;
    getActiveNetworks(): ConceroNetwork[];
    getNetworkById(chainId: number): ConceroNetwork;
    getNetworkByName(name: string): ConceroNetwork;
    getNetworkBySelector(selector: string): ConceroNetwork;
    getVerifierNetwork(): ConceroNetwork;
    forceUpdate(): Promise<void>;
    private updateNetworks;
    private notifyListeners;
    triggerInitialUpdates(): Promise<void>;
    private createNetworkConfig;
    private getTestingNetworks;
    private filterNetworks;
    dispose(): void;
}
//# sourceMappingURL=ConceroNetworkManager.d.ts.map